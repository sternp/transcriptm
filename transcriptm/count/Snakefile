
onsuccess:
    print("\u001b[42mCOMPLETE: TranscriptM successfully finished\u001b[0m")

onerror:
    print("\u001b[41mERROR: TranscriptM failed\u001b[0m")

onstart:
    import os
    import sys

    from snakemake.utils import logger, min_version

    # minimum required snakemake version
    min_version("6.5.3")
    short_reads_1 = config["short_reads_1"]
    short_reads_2 = config["short_reads_2"]
    genome_dir = config["genome_dir"]
    fasta_extension = config["fasta_extension"]
    n_cores = config["n_cores"]
    output = config["output"]
    ref = config["ref"]
    gff = config["gff"]
    max_memory = config["max_memory"]
    human_db = config["human_db"]
    silva_db = config["silva_db"]
    trimmomatic = config["trimmomatic"]
    sequencer_source = config["sequencer_source"]
    kingdom = config["kingdom"]
    skip_qc = config["skip_qc"]

rule all:
    input:
        "qc/done",
        "annotate/done",
        "coverm/done",
        "coverm_filter/done",
#        "estimate_contam/done",
        "detectm/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]

rule qc:
    input:
    output:
        "qc/done"
    conda:
        "../envs/qc.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
    script:
        "../scripts/qc.py"

rule annotate:
    input:
        "qc/done"
    output:
        "annotate/done"
    conda:
        "../envs/annotate.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
    script:
        "../scripts/annotate.py"

rule coverm:
    input:
        'annotate/done'
    output:
        "coverm/done",
    conda:
        "../envs/coverm.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        fna_file = 'annotate/combined_reference.fna',
        qc_reads_1 = 'qc/clean_reads/R1/*R1.fastq*',
        qc_reads_2 = 'qc/clean_reads/R2/*R2.fastq*',
        bam = os.path.join('coverm/*.bam')
    shell:
        "echo R1 = {params.qc_reads_1} && "
        "echo R2 = {params.qc_reads_2} && "
        "coverm make -r {params.fna_file} -1 {params.qc_reads_1} -2 {params.qc_reads_2} -t {threads} -o coverm && "
        "mv {params.bam} coverm/combined_reference.bam && "
        "touch coverm/done"

rule coverm_filter:
    input:
        'coverm/done'
    output:
        "coverm_filter/done",
    conda:
        "../envs/coverm.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm/combined_reference.bam'
    shell:
        "coverm filter \
        --bam-files {params.bam} \
        --output-bam-files coverm_filter/combined_reference_filtered.bam \
        --threads {threads} \
        --min-read-aligned-percent 0.95 \
        --min-read-percent-identity 0.90 \
        --proper-pairs-only \
        --exclude-supplementary && "

        "samtools index coverm_filter/combined_reference_filtered.bam && "
        "touch coverm_filter/done"

#rule estimate_contam:
#    input:
#        'coverm_filter/done'
#    output:
#        "estimate_contam/done"
#    conda:
#        "../envs/coverm.yaml"
#    threads:
#        config["n_cores"]
#    resources:
#        mem_gb = config["max_memory"]
#    params:
#        bam = 'coverm_filter/combined_reference_filtered.bam',
#        gff = 'annotate/combined_reference.gff'
#    shell:
#        "echo 'Estimating gDNA contamination... && '"
#        "bedtools coverage -b {params.bam} -a {params.gff} -hist | sed '/all/!d' > estimate_contam/coverage_count && "
#        "awk '{{print $3 $2}}' estimate_contam/coverage_count > tempa && "
#        "awk '{{while ($1-- > 0) print $2}}' tempa | nl | sed 's/  *//g' > estimate_contam/temp1 && "
#        "(echo \"cover\" && cat estimate_contam/temp1) > estimate_contam/temp2 && mv estimate_contam/temp2 estimate_contam/density_plot_values && "
#        "rm estimate_contam/temp1 estimate_contam/temp2 && "
#        "touch estimate_contam/done"

rule detectm:
    input:
        "coverm_filter/done"
    output:
        'detectm/done'
    conda:
        '../envs/detectm.yaml'
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm_filter/combined_reference_filtered.bam',
        gff = 'annotate/combined_reference.gff',
        detectm = os.path.join(workflow.basedir, "bin/detectm/detectm")
    shell:
        "python {params.detectm} --bam {params.bam} --gff {params.gff} --output_directory detectm --force --cutoff 1 && "
        "touch detectm/done"

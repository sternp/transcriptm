onsuccess:
    print("\u001b[42mCOMPLETE: TranscriptM successfully finished\u001b[0m")

onerror:
    print("\u001b[41mERROR: TranscriptM failed\u001b[0m")

onstart:
    import os
    import sys

    from snakemake.utils import logger, min_version

    # minimum required snakemake version
    min_version("6.5.3")
    short_reads_1 = config["short_reads_1"]
    short_reads_2 = config["short_reads_2"]
    genome_dir = config["genome_dir"]
    fasta_extension = config["fasta_extension"]
    n_cores = config["n_cores"]
    output = config["output"]
    ref = config["ref"]
    gff = config["gff"]
    max_memory = config["max_memory"]
    sequencer_source = config["sequencer_source"]
    kingdom = config["kingdom"]
    skip_qc = config["skip_qc"]
    min_read_aligned_percent = config["min_read_aligned_percent"]
    min_read_percent_identity = config["min_read_percent_identity"]
    gDNA = config["gDNA"]

rule all:
    input:
        "qc/done",
        "annotate/done",
        "coverm/done",
        "coverm_filter/done",
        "detect_contam/done",
        "filter_contam/done",
        "final_bam/done",
        "feature_count/done",
        "final_table/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]

rule qc:
    input:
    output:
        "qc/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    message:
        "Performing read QC..."
    script:
        "../scripts/qc.py"

rule annotate:
    input:
        "qc/done"
    output:
        "annotate/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    message:
        "Creating reference .fna and .gff files..."
    script:
        "../scripts/annotate.py"

rule coverm:
    input:
        'annotate/done'
    output:
        "coverm/done",
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        fna_file = 'annotate/combined_reference.fna',
        qc_reads_1 = 'qc/clean_reads/R1/*',
        qc_reads_2 = 'qc/clean_reads/R2/*',
        bam = os.path.join('coverm/*.bam')
    message:
        "Aligning reads to reference sequences..."
    shell:
        "echo R1 = {params.qc_reads_1} && "
        "echo R2 = {params.qc_reads_2} && "
        "coverm make -r {params.fna_file} -1 {params.qc_reads_1} -2 {params.qc_reads_2} -t {threads} -o coverm && "
        "mv {params.bam} coverm/combined_reference.bam && "
        "touch coverm/done"

rule coverm_filter:
    input:
        'coverm/done'
    output:
        "coverm_filter/done",
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm/combined_reference.bam',
        min_read_aligned_percent = config["min_read_aligned_percent"],
        min_read_percent_identity = config["min_read_percent_identity"]
    message:
        "Filtering read alignments..."
    shell:
        "coverm filter \
        --bam-files {params.bam} \
        --output-bam-files coverm_filter/combined_reference_filtered.bam \
        --threads {threads} \
        --min-read-aligned-percent {params.min_read_aligned_percent} \
        --min-read-percent-identity {params.min_read_percent_identity} \
        --proper-pairs-only \
        --exclude-supplementary && "

        "samtools index coverm_filter/combined_reference_filtered.bam && "
        "touch coverm_filter/done"

rule detect_contam:
    input:
        'coverm_filter/done'
    output:
        "detect_contam/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        gDNA = int(config["gDNA"]),
    message:
        "Threshold for gDNA contamination set at {params.gDNA}x median gDNA read coverage per genome\nDetecting gDNA contamination..."
    script:
        "../scripts/detect_contam.py"


rule filter_contam:
    input:
        "detect_contam/done"
    output:
        "filter_contam/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        in_bam = 'detect_contam/contam_contigs.bam',
        out_bam = 'filter_contam/decontam_contigs.bam',
        gff = 'annotate/combined_reference.gff',
        overlap_list = 'detect_contam/overlappedORFs.bed',
        contam_list = 'detect_contam/contaminated_contigs_list'
    message:
        "Filtering gDNA contamination, if any, from BAM..."
    script:
        "../scripts/strandcheckr.R"


rule finalise_bam:
    input:
        "filter_contam/done"
    output:
        "final_bam/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
#    params:
#        contam_bam = 'coverm_filter/combined_reference_filtered.bam',
#        non-contam_bam = 'filter_contam/decontaminated.bam'
    message:
        "Merging decontaminated contigs with other contigs..."
    shell:
        "if [ -s detect_contam/contaminated_contigs_list ];  then  samtools merge detect_contam/non-contam_contigs.bam filter_contam/decontam_contigs.bam -o final_bam/final.bam; else ln -s $PWD/coverm_filter/combined_reference_filtered.bam final_bam/final.bam; fi && "
        #"if [ -s detect_contam/contaminated_contigs_list ]; then samtools merge detect_contam/non-contam_contigs.bam filter_contam/decontam_contigs.bam -o final_bam/final.bam ; fi && "
        "samtools index final_bam/final.bam && "
#        "rm detect_contam/*.bam* && "
        "touch final_bam/done"

rule feature_count:
    input:
        "final_bam/done"
    output:
        "feature_count/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'final_bam/final.bam',
        gff = 'annotate/combined_reference.gff'
    message:
        "Counting reads..."
    shell:
        "featureCounts \
            -a {params.gff} \
            -o feature_count/feature_count_table \
            -F GTF \
            -T {threads} \
            -p \
            -M \
            -s 2 \
            --fraction \
            -t 'CDS' \
            --extraAttributes 'gene,product,db_xref,Dbxref,inference,UniProtKB' \
            -g 'ID' \
            {params.bam} && "

        "sed -i '1d' feature_count/feature_count_table && "

        "featureCounts \
            -a {params.gff} \
            -o feature_count/feature_count_table_fwd \
            -F GTF \
            -T {threads} \
            -p \
            -M \
            -s 1 \
            --fraction \
            -t 'CDS' \
            --extraAttributes 'gene,product,db_xref,Dbxref,inference,UniProtKB' \
            -g 'ID' \
            {params.bam} && "

        "sed -i '1d' feature_count/feature_count_table_fwd && "

        "printf 'Read count output available at: '$PWD'/feature_count/feature_count_table\n\n' && "
        "printf 'A forward strand read count (for non-Illumina data) is also available at: '$PWD'/feature_count/feature_count_table_fwd\n\n' && "
        #"ln -sf feature_count/feature_count_table feature_count_table  && "

        #"rm detect_contam/temp* detect_contam/fwd1* detect_contam/fwd2* && "

        "touch feature_count/done"

rule final_output:
    input:
        "feature_count/done"
    output:
        "final_table/done"
    params:
        in_table = 'feature_count/feature_count_table',
        out_table = 'final_table/rawcount_tpm_table.txt',
        out_touch = 'final_table/done'
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    message:
        "Calculating TPM from raw counts and formatting final table..."
    script:
        "../scripts/calculate_tpm.py"

ruleorder: all > qc > annotate > coverm > detectm

onsuccess:
    print("COMPLETE: TranscriptM finished without error")

onerror:
    print("ERROR: TranscriptM experienced an error")

onstart:
    import os
    import sys

    from snakemake.utils import logger, min_version

    # minimum required snakemake version
    min_version("6.5.3")
    short_reads_1 = config["short_reads_1"]
    short_reads_2 = config["short_reads_2"]
    genome_dir = config["genome_dir"]
    fasta_extension = config["fasta_extension"]
    n_cores = config["n_cores"]
    output = config["output"]
    ref = config["ref"]
    gff = config["gff"]
    max_memory = config["max_memory"]
    human_db = config["human_db"]
    silva_db = config["silva_db"]
    trimmomatic = config["trimmomatic"]
    sequencer_source = config["sequencer_source"]
    kingdom = config["kingdom"]


rule all:
    input:
        "qc/done",
        "annotate/done",
        "coverm/done",
        "coverm_filter/done",
        "detectm/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]

rule qc:
    input:
    output:
        "qc/done"
    conda:
        "../envs/qc.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
    script:
        "../scripts/qc.py"

rule annotate:
    input:
        "qc/done"
    output:
        "annotate/done"
    conda:
        "../envs/annotate.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
    script:
        "../scripts/annotate.py"


rule coverm:
    input:
        'annotate/done'
    output:
        "coverm/done",
    conda:
        "../envs/coverm.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        fna_file = 'annotate/combined_reference.fna',
        qc_reads_1 = 'qc/clean_reads/*1.fastq',
        qc_reads_2 = 'qc/clean_reads/*2.fastq',
        bam = os.path.join('coverm/*.bam')
    shell:
        "echo R1 = {params.qc_reads_1} && "
        "echo R2 = {params.qc_reads_2} && "
        "coverm make -r {params.fna_file} -1 {params.qc_reads_1} -2 {params.qc_reads_2} -t {threads} -o coverm && "
        "mv {params.bam} coverm/combined_reference.bam && "
#        "samtools index coverm/combined_reference.bam && "
        "touch coverm/done"

rule coverm_filter:
    input:
        'coverm/done'
    output:
        "coverm_filter/done",
    conda:
        "../envs/coverm.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm/combined_reference.bam'
    shell:
        "coverm filter \
        --bam-files {params.bam} \
        --output-bam-files coverm_filter/combined_reference_filtered.bam \
        --threads {threads} \
        --min-read-aligned-length 50 \
        --min-read-percent-identity 0.95 \
        --proper-pairs-only && "
        "samtools index coverm_filter/combined_reference_filtered.bam && "
        "touch coverm_filter/done"

rule detectm:
    input:
        'coverm_filter/done'
    output:
        'detectm/done'
    conda:
        "../envs/detectm.yaml"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm_filter/combined_reference_filtered.bam',
        gff = 'annotate/combined_reference.gff',
        detectm = os.path.join(workflow.basedir, "bin/detectm/detectm")
    shell:
        "python {params.detectm} --bam {params.bam} --gff {params.gff} --measure_type count --output_directory detectm --force && "
        "touch detectm/done"
